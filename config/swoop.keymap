/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk { quick-release; };

/ {
    behaviors {
        hm: hm {
            compatible = "zmk,behavior-hold-tap";
            label = "HM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <170>;
            tapping-term-ms = <190>;
            global-quick-tap;
            flavor = "tap-preferred";
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            global-quick-tap;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 20 21 22 23 24 14 30 31 32 33 34 35 25 15 5 6 16 26 27 17 7 8 18 28 29 19 9>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 10 20 21 1 11 12 2 3 4 24 14 13 23 22 30 31 32 33 34 35 25 26 28 27 29 9 8 7 6 5 15>;
        };
    };

    combos {
        compatible = "zmk,combos";

        left_bkt {
            bindings = <&kp LBKT>;
            key-positions = <3 4>;
            timeout-ms = <30>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <6 5>;
            timeout-ms = <30>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <13 14>;
            timeout-ms = <30>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <16 15>;
            timeout-ms = <30>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <23 24>;
            timeout-ms = <35>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <26 25>;
            timeout-ms = <35>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <3 14>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <15 5>;
            timeout-ms = <30>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            timeout-ms = <30>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <2 3>;
            timeout-ms = <30>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
            timeout-ms = <30>;
        };

        repeat {
            bindings = <&kp C_REPEAT>;
            key-positions = <12 13>;
            timeout-ms = <30>;
        };

        back {
            bindings = <&kp BACKSPACE>;
            key-positions = <6 7>;
            timeout-ms = <30>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <7 8>;
            timeout-ms = <30>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            label = "Base";
            bindings = <
&kp Q            &kp W            &kp E         &kp R              &kp T         &kp Y      &kp U               &kp I            &kp O             &kp P
&hml LEFT_GUI A  &hml LEFT_ALT S  &hml LCTRL D  &hml LEFT_SHIFT F  &kp G         &kp H      &hmr RIGHT_SHIFT J  &hmr RCTRL K     &hmr RIGHT_ALT L  &hmr RIGHT_GUI SEMICOLON
&kp Z            &kp X            &kp C         &kp V              &kp B         &kp N      &kp M               &kp COMMA        &kp DOT           &kp FSLH
                                  &kp LEFT_GUI  &ltq 2 SPACE       &ltq 1 TAB    &kp ENTER  &ltq 2 BACKSPACE    &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp RIGHT LEFT>;
        };

        num {
            label = "NUM";
            bindings = <
&kp N1        &kp N2        &kp N3     &kp N4          &kp N5          &kp N6              &kp N7        &kp N8            &kp N9         &kp N0
&kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &kp CAPSLOCK    &kp LEFT            &kp DOWN      &kp UP            &kp RIGHT      &trans
&kp F1        &kp F2        &kp F3     &kp F4          &kp F5          &kp LG(LEFT_ARROW)  &kp LG(DOWN)  &kp LG(UP_ARROW)  &kp RG(RIGHT)  &kp F12
                            &trans     &mo 3           &trans          &trans              &mo 3         &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp RIGHT LEFT>;
        };

        sym {
            label = "SYM";
            bindings = <
&kp EXCLAMATION   &kp AT             &kp HASH       &kp DOLLAR      &kp PERCENT        &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp LEFT_GUI      &kp LEFT_ALT       &kp LCTRL      &kp LEFT_SHIFT  &kp CAPSLOCK       &kp PLUS   &kp MINUS      &kp GRAVE     &kp PIPE              &kp SINGLE_QUOTE
&kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LG(LA(C))  &kp LEFT_BRACE  &kp RIGHT_BRACE    &kp EQUAL  &kp UNDER      &kp TILDE     &kp BACKSLASH         &kp DOUBLE_QUOTES
                                     &trans         &trans          &trans             &trans     &trans         &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp RIGHT LEFT>;
        };

        fun {
            label = "FUN";
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2       &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans
&trans        &trans          &kp C_VOL_UP       &trans        &trans          &trans  &trans  &trans  &trans  &trans
&bt BT_CLR    &bt BT_CLR_ALL  &kp C_VOLUME_DOWN  &trans        &trans          &trans  &trans  &trans  &trans  &trans
                              &trans             &trans        &trans          &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp RIGHT LEFT>;
        };
    };
};
