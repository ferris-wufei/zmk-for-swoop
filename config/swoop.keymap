/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hr: hr {
            compatible = "zmk,behavior-hold-tap";
            label = "HR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <180>;
            tapping-term-ms = <200>;
            global-quick-tap;
            flavor = "tap-preferred";
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            global-quick-tap;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };

        hr250: hr250 {
            compatible = "zmk,behavior-hold-tap";
            label = "HR250";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <180>;
            tapping-term-ms = <250>;
            global-quick-tap;
            flavor = "tap-preferred";
        };

        sftcap: sftcap {
            compatible = "zmk,behavior-tap-dance";
            label = "SFTCAP";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPSLOCK>;
        };
    };

    combos {
        compatible = "zmk,combos";

        left_bkt {
            bindings = <&kp LBKT>;
            key-positions = <3 4>;
            timeout-ms = <30>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <6 5>;
            timeout-ms = <30>;
        };

        left_par {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <13 14>;
            timeout-ms = <30>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <16 15>;
            timeout-ms = <30>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <23 24>;
            timeout-ms = <35>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <26 25>;
            timeout-ms = <35>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <3 14>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <15 5>;
            timeout-ms = <30>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <12 11>;
            timeout-ms = <30>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            label = "Base";
            bindings = <
&kp Q           &kp W           &kp E         &kp R                &kp T         &kp Y         &kp U                 &kp I        &kp O       &kp P
&hr LEFT_GUI A  &hr LEFT_ALT S  &hr LCTRL D   &hr250 LEFT_SHIFT F  &kp G         &kp H         &hr250 RIGHT_SHIFT J  &hr RCTRL K  &hr RALT L  &hr RIGHT_GUI SEMICOLON
&kp Z           &kp X           &kp C         &kp V                &kp B         &kp N         &kp M                 &kp COMMA    &kp DOT     &kp FSLH
                                &kp LEFT_GUI  &ltq 2 SPACE         &ltq 1 TAB    &ltq 1 ENTER  &ltq 2 BACKSPACE      &sftcap
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp RIGHT LEFT>;
        };

        number {
            label = "NUMBER";
            bindings = <
&kp N1        &kp N2        &kp N3     &kp N4          &kp N5        &kp N6              &kp N7         &kp N8       &kp N9         &kp N0
&kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &kp ESCAPE    &kp LEFT            &kp DOWN       &kp UP       &kp RIGHT      &kp F11
&kp F1        &kp F2        &kp F3     &kp F4          &kp F12       &kp LG(LEFT_ARROW)  &kp PAGE_DOWN  &kp PAGE_UP  &kp RG(RIGHT)  &kp F12
                            &trans     &mo 3           &trans        &trans              &mo 3          &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp RIGHT LEFT>;
        };

        symbol {
            label = "SYMBOL";
            bindings = <
&kp EXCLAMATION  &kp AT            &kp HASH       &kp DOLLAR         &kp PERCENT        &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp LEFT_GUI     &kp LEFT_ALT      &kp LCTRL      &kp LEFT_SHIFT     &kp ESCAPE         &kp PLUS   &kp MINUS      &kp GRAVE     &kp PIPE              &kp SINGLE_QUOTE
&kp LEFT_BRACE   &kp LEFT_BRACKET  &kp LG(LA(C))  &kp RIGHT_BRACKET  &kp RIGHT_BRACE    &kp EQUAL  &kp UNDER      &kp TILDE     &kp BACKSLASH         &kp DOUBLE_QUOTES
                                   &trans         &trans             &trans             &trans     &trans         &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp RIGHT LEFT>;
        };

        function {
            label = "FUNCTION";
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2       &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans
&trans        &trans        &kp C_VOL_UP       &trans        &kp C_PREV      &trans  &trans  &trans  &trans  &trans
&bt BT_CLR    &trans        &kp C_VOLUME_DOWN  &trans        &kp C_NEXT      &trans  &trans  &trans  &trans  &bootloader
                            &trans             &trans        &trans          &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp RIGHT LEFT>;
        };
    };
};
